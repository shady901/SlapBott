// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SlapBott.Data;

#nullable disable

namespace SlapBott.Data.Migrations
{
    [DbContext(typeof(SlapbottDbContext))]
    [Migration("20240319000025_Adding Races nullable")]
    partial class AddingRacesnullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.3");

            modelBuilder.Entity("SlapBott.Data.Models.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("CharExp")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("InventoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("RaceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StatsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RaceId");

                    b.ToTable("Character");
                });

            modelBuilder.Entity("SlapBott.Data.Models.Enemy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CharacterId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("Enemies", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("Enemy");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SlapBott.Data.Models.Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CharID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("InventoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemLevel")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("Seed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SlotID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("SlapBott.Data.Models.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CharacterId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Equiped")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId")
                        .IsUnique();

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("SlapBott.Data.Models.PlayerCharacter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CharacterId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("DiscordId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasLeveled")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsTemp")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RegistrationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId")
                        .IsUnique();

                    b.HasIndex("RegistrationId");

                    b.ToTable("PlayerCharacter");
                });

            modelBuilder.Entity("SlapBott.Data.Models.Race", b =>
                {
                    b.Property<int>("Name")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BaseStats")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PerLevelStats")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.ToTable("Races");
                });

            modelBuilder.Entity("SlapBott.Data.Models.Registration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ActiveCharacterId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("DiscordId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ActiveCharacterId");

                    b.ToTable("Registration", (string)null);
                });

            modelBuilder.Entity("SlapBott.Data.Models.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("ElementalType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StatTypeRatio")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("SlapBott.Data.Models.Stats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CharacterId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("stats")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId")
                        .IsUnique();

                    b.ToTable("PlayersStats");
                });

            modelBuilder.Entity("SlapBott.Data.Models.TurnAttackRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("SkillId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TurnId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.HasIndex("TurnId");

                    b.ToTable("TurnAttackRecord");
                });

            modelBuilder.Entity("SlapBott.Services.Combat.Models.CombatState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("ChannelID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrentTurnId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("CombatStates");
                });

            modelBuilder.Entity("SlapBott.Services.Combat.Models.EnemyCombatState", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CombatStateId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ParticipantId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CombatStateId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("EnemyCombatState");
                });

            modelBuilder.Entity("SlapBott.Services.Combat.Models.PlayerCharacterCombatState", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CombatStateId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ParticipantId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CombatStateId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("PlayerCharacterCombatState");
                });

            modelBuilder.Entity("SlapBott.Services.Combat.Models.Turn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AttackerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CombatStateId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TurnId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AttackerId");

                    b.HasIndex("TurnId", "CombatStateId");

                    b.ToTable("Turns");
                });

            modelBuilder.Entity("SlapBott.Data.Models.Boss", b =>
                {
                    b.HasBaseType("SlapBott.Data.Models.Enemy");

                    b.HasDiscriminator().HasValue("Boss");
                });

            modelBuilder.Entity("SlapBott.Data.Models.RaidBoss", b =>
                {
                    b.HasBaseType("SlapBott.Data.Models.Boss");

                    b.HasDiscriminator().HasValue("RaidBoss");
                });

            modelBuilder.Entity("SlapBott.Data.Models.Character", b =>
                {
                    b.HasOne("SlapBott.Data.Models.Race", "Race")
                        .WithMany()
                        .HasForeignKey("RaceId");

                    b.Navigation("Race");
                });

            modelBuilder.Entity("SlapBott.Data.Models.Enemy", b =>
                {
                    b.HasOne("SlapBott.Data.Models.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("SlapBott.Data.Models.Equipment", b =>
                {
                    b.HasOne("SlapBott.Data.Models.Inventory", null)
                        .WithMany("Bag")
                        .HasForeignKey("InventoryId");
                });

            modelBuilder.Entity("SlapBott.Data.Models.Inventory", b =>
                {
                    b.HasOne("SlapBott.Data.Models.Character", "Character")
                        .WithOne("Inventory")
                        .HasForeignKey("SlapBott.Data.Models.Inventory", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("SlapBott.Data.Models.PlayerCharacter", b =>
                {
                    b.HasOne("SlapBott.Data.Models.Character", "Character")
                        .WithOne()
                        .HasForeignKey("SlapBott.Data.Models.PlayerCharacter", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SlapBott.Data.Models.Registration", "Registration")
                        .WithMany("PlayerCharacters")
                        .HasForeignKey("RegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Registration");
                });

            modelBuilder.Entity("SlapBott.Data.Models.Registration", b =>
                {
                    b.HasOne("SlapBott.Data.Models.PlayerCharacter", "Character")
                        .WithMany()
                        .HasForeignKey("ActiveCharacterId");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("SlapBott.Data.Models.Stats", b =>
                {
                    b.HasOne("SlapBott.Data.Models.Character", "Character")
                        .WithOne("Stats")
                        .HasForeignKey("SlapBott.Data.Models.Stats", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("SlapBott.Data.Models.TurnAttackRecord", b =>
                {
                    b.HasOne("SlapBott.Data.Models.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SlapBott.Services.Combat.Models.Turn", "Turn")
                        .WithMany("AttackRecords")
                        .HasForeignKey("TurnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("Turn");
                });

            modelBuilder.Entity("SlapBott.Services.Combat.Models.EnemyCombatState", b =>
                {
                    b.HasOne("SlapBott.Services.Combat.Models.CombatState", "CombatState")
                        .WithMany()
                        .HasForeignKey("CombatStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SlapBott.Services.Combat.Models.CombatState", null)
                        .WithMany("Enemies")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SlapBott.Data.Models.Enemy", "Enemy")
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CombatState");

                    b.Navigation("Enemy");
                });

            modelBuilder.Entity("SlapBott.Services.Combat.Models.PlayerCharacterCombatState", b =>
                {
                    b.HasOne("SlapBott.Services.Combat.Models.CombatState", "CombatState")
                        .WithMany()
                        .HasForeignKey("CombatStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SlapBott.Services.Combat.Models.CombatState", null)
                        .WithMany("Characters")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SlapBott.Data.Models.PlayerCharacter", "Character")
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("CombatState");
                });

            modelBuilder.Entity("SlapBott.Services.Combat.Models.Turn", b =>
                {
                    b.HasOne("SlapBott.Data.Models.Character", "Attacker")
                        .WithMany()
                        .HasForeignKey("AttackerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SlapBott.Services.Combat.Models.CombatState", "CombatState")
                        .WithMany("Turns")
                        .HasForeignKey("TurnId", "CombatStateId")
                        .HasPrincipalKey("CurrentTurnId", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attacker");

                    b.Navigation("CombatState");
                });

            modelBuilder.Entity("SlapBott.Data.Models.Character", b =>
                {
                    b.Navigation("Inventory");

                    b.Navigation("Stats");
                });

            modelBuilder.Entity("SlapBott.Data.Models.Inventory", b =>
                {
                    b.Navigation("Bag");
                });

            modelBuilder.Entity("SlapBott.Data.Models.Registration", b =>
                {
                    b.Navigation("PlayerCharacters");
                });

            modelBuilder.Entity("SlapBott.Services.Combat.Models.CombatState", b =>
                {
                    b.Navigation("Characters");

                    b.Navigation("Enemies");

                    b.Navigation("Turns");
                });

            modelBuilder.Entity("SlapBott.Services.Combat.Models.Turn", b =>
                {
                    b.Navigation("AttackRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
